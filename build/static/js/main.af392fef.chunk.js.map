{"version":3,"sources":["components/common/HeaderWrapper.js","lib/styles/myColor.js","components/common/Button.js","modules/loading.js","lib/createSaga.js","lib/api/client.js","lib/api/auth.js","modules/auth.js","components/common/BodyWrapper.js","pages/HomePage.js","components/auth/AuthTemplate.js","components/auth/AuthForm.js","modules/user.js","containers/LoginForm.js","pages/LoginPage.js","containers/RegisterForm.js","pages/RegisterPage.js","components/movie/Moviemain.js","components/movie/Arrowswiper.js","containers/MovieForm.js","pages/MyPage.js","App.js","modules/index.js","index.js"],"names":["StyledHeader","styled","div","BoxInsideStyledHeader","Header","props","EmptySpace","Spacer","HeaderWrapper","myColor","mainRed","mainBlack","mainWhite","mainGray","StyledButton","button","size","css","ButtonTextAlign","ButtonText","Button","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionType","type","createSaga","request","SUCCESS","FAILURE","put","call","response","data","error","client","axios","create","logout","post","authSaga","CHANGE_INPUT","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeInput","form","key","value","initializeForm","register","username","password","login","registerSaga","loginSaga","takeLatest","initialState","passwordConfirm","auth","authError","produce","draft","StyledBody","BodyWrapper","FirstText","p","SecondText","ThirdText","StyledBox","FormWrapper","Input","input","ErrorMessage","InputButton","InputWrapper","withRouter","history","useState","userEmail","setUserEmail","setError","dispatch","useDispatch","inputEl","useRef","emailRegExp","color","to","name","autoComplete","placeholder","ref","onChange","e","target","onClick","length","current","focus","match","push","Template","TemplateWrapper","AuthTemplate","children","AuthFormContainer","StyledForm","Footer","TextBox","BoldTextBox","AuthFormInput","AuthFormButton","typeMap","AuthForm","onSubmit","text","logoutSaga","userSaga","TEMP_LOGGEDIN","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempLoggedIn","user","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","console","log","authAPI","checkError","useSelector","useEffect","setItem","JSON","stringify","preventDefault","LoginPage","status","includes","RegisterPage","MovieContainer","StyledImg","img","StyledList","ul","Moviemain","title","year","summary","poster","genres","card","setCard","onhandleClick","className","src","alt","map","el","StyledSwiper","Swiper","Arrowswiper","isLoading","movies","SwiperCore","use","Navigation","navigation","slidesPerView","spaceBetween","centeredSlides","pagination","clickable","scrollbar","draggable","dragSize","onSlideChange","movie","image","id","MovieForm","setMovies","getMovies","a","sortedMovies","x","Object","medium_cover_image","UserInfo","mypage","setMypage","storageUser","getItem","App","component","HomePage","path","exact","MyPage","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","parse","checkUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af392fef.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\n/* 화면 맨 위에 fixed된 header 부분*/\r\nconst StyledHeader = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 5rem;\r\n  background-color: transparent;\r\n  text-align: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nconst HeaderWrapper = (props) => <StyledHeader {...props} />;\r\n\r\n/* headerWrapper안에 들어갈 element가 배치될 div */\r\nconst BoxInsideStyledHeader = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: 97vw;\r\n\r\n  @media (min-width: 480px) {\r\n    width: 90vw;\r\n    padding: 0.25rem;\r\n  }\r\n`;\r\nexport const Header = (props) => <BoxInsideStyledHeader {...props} />;\r\n\r\n/* header 공간을 차지해서 body부분과 겹치지 않게 해주는 spacer */\r\nconst EmptySpace = styled.div`\r\n  height: 5rem;\r\n`;\r\nexport const Spacer = (props) => <EmptySpace {...props} />;\r\n\r\nexport default HeaderWrapper;\r\n","/* 애플리케이션에서 사용할 기본 컬러 */\r\n\r\nconst myColor = {\r\n  mainRed: [\"#E50914\", \"#CD2C2C\"],\r\n  mainBlack: \"#221f1f\",\r\n  mainWhite: \"#f5f5f1\",\r\n  mainGray: [\r\n    \"#f8f9fa\",\r\n    \"#f1f3f5\",\r\n    \"#e9ecef\",\r\n    \"#dee2e6\",\r\n    \"#ced4da\",\r\n    \"#adb5bd\",\r\n    \"#868e96\",\r\n    \"#495057\",\r\n    \"#343a40\",\r\n    \"#212529\",\r\n  ],\r\n};\r\n\r\nexport default myColor;","import styled, { css } from \"styled-components\";\r\nimport myColor from \"../../lib/styles/myColor\";\r\n\r\n/*\r\n * 기본 버튼 컴포넌트\r\n * props.size = font-size(rem)\r\n */\r\n\r\nconst StyledButton = styled.button`\r\n  border: none;\r\n  border-radius: 4px;\r\n  color: ${myColor.mainWhite};\r\n  outline: none;\r\n  padding: 0.5rem 1rem;\r\n  cursor: pointer;\r\n  z-index: 10;\r\n  background: ${myColor.mainRed[0]};\r\n  &:hover {\r\n    background: ${myColor.mainRed[1]};\r\n  }\r\n\r\n  ${(props) =>\r\n    props.size &&\r\n    css`\r\n      font-size: ${props.size}rem;\r\n    `}\r\n`;\r\n\r\nconst ButtonTextAlign = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const ButtonText = (props) => <ButtonTextAlign {...props} />;\r\n\r\nconst Button = (props) => <StyledButton {...props} />;\r\n\r\nexport default Button;\r\n","import { createAction, handleActions } from \"redux-actions\";\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\nexport const startLoading = createAction(\r\n    START_LOADING,\r\n    requestType => requestType,\r\n);\r\n\r\nexport const finishLoading = createAction(\r\n    FINISH_LOADING,\r\n    requestType => requestType,\r\n);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n    {\r\n        [START_LOADING]: (state, action) => ({\r\n            ...state,\r\n            [action.payload]:true,\r\n        }),\r\n        [FINISH_LOADING]: (state, action) => ({\r\n            ...state,\r\n            [action.payload]:false,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default loading;","import { call, put } from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\n\r\nexport const createRequestActionType = type => {\r\n    const SUCCESS = `${type}_SUCCESS`;\r\n    const FAILURE = `${type}_FAILURE`;\r\n    return [ type, SUCCESS, FAILURE ];\r\n};\r\n\r\nexport default function createSaga(type, request) {\r\n    const SUCCESS = `${type}_SUCCESS`;\r\n    const FAILURE = `${type}_FAILURE`;\r\n\r\n    return function*(action) {\r\n        yield put(startLoading(type));\r\n        try{\r\n            const response = yield call(request, action.payload);\r\n            yield put({\r\n                type:SUCCESS,\r\n                payload:response.data\r\n            });\r\n        } catch(e) {\r\n            yield put({\r\n                type:FAILURE,\r\n                payload:e,\r\n                error:true\r\n            });\r\n        }\r\n        yield put(finishLoading(type));\r\n    };\r\n}","import axios from 'axios';\r\n\r\nconst client = axios.create();\r\n\r\nexport default client;","import client from './client';\r\n\r\n//로그인 \r\nexport const login = ({ username, password }) => client.post('/api/auth/login', { username, password });\r\n\r\n//회원가입\r\nexport const register = ({ username, password }) => client.post('/api/auth/register', { username, password });\r\n\r\n//로그인 상태 확인\r\nexport const check = () => client.get('/api/auth/check');\r\n\r\n//로그아웃\r\nexport const logout = () => client.post('/api/auth/logout');","import { createAction, handleActions } from \"redux-actions\";\r\nimport produce from \"immer\";\r\nimport createSaga, { createRequestActionType } from \"../lib/createSaga\";\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_INPUT = \"auth/CHANGE_INPUT\";\r\nconst INITIALIZE_FORM = \"auth/INITIALIZE_FORM\";\r\n\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] =\r\n  createRequestActionType(\"auth/REGISTER\");\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] =\r\n  createRequestActionType(\"auth/LOGIN\");\r\n\r\nexport const changeInput = createAction(\r\n  CHANGE_INPUT,\r\n  ({ form, key, value }) => ({\r\n    form, //register 혹은 login\r\n    key, //username, password, passwordConfirm\r\n    value, //실제 입력된 값\r\n  })\r\n);\r\n\r\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form); //register 혹은 login\r\n\r\nexport const register = createAction(REGISTER, ({ username, password })=>({\r\n  username,\r\n  password,\r\n}));\r\n\r\nexport const login = createAction(LOGIN, ({ username, password })=>({\r\n  username,\r\n  password,\r\n}));\r\n\r\n//사가 생성 \r\nconst registerSaga = createSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createSaga(LOGIN, authAPI.login);\r\nexport function* authSaga() {\r\n  yield takeLatest(REGISTER, registerSaga);\r\n  yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState = {\r\n  register: {\r\n    username: \"\",\r\n    password: \"\",\r\n    passwordConfirm: \"\",\r\n  },\r\n  login: {\r\n    username: \"\",\r\n    password: \"\",\r\n  },\r\n  auth:null,\r\n  authError:null,\r\n};\r\n\r\nconst auth = handleActions(\r\n  {\r\n    [CHANGE_INPUT]: (state, { payload: { form, key, value } }) =>\r\n      produce(state, (draft) => {\r\n        draft[form][key] = value; //value 값 저장 예-state.register.username=새로운 값\r\n      }),\r\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\r\n      ...state,\r\n      [form]: initialState[form], //빈 폼으로 덮어씀\r\n      authError: null,\r\n    }),\r\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError:null,\r\n      auth,\r\n    }),\r\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError:error,\r\n    }),\r\n    [LOGIN_SUCCESS]: (state, { payload: auth}) => ({\r\n      ...state,\r\n      authError:null,\r\n      auth,\r\n    }),\r\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError:error,\r\n    }),\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default auth;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledBody = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  margin: 4rem auto;\r\n  min-height: 460px;\r\n\r\n  @media (min-width: 320px) and (max-width: 700px) {\r\n    max-width: 90vw;\r\n  }\r\n  \r\n  @media (min-width: 701px) and (max-width: 869px) {\r\n    max-width: 620px;\r\n    min-height: 500px;\r\n  }\r\n\r\n  @media (min-width: 870px) {\r\n    max-width: 780px;\r\n    min-height: 460px;\r\n  }\r\n`;\r\n\r\nconst BodyWrapper = (props) => <StyledBody {...props} />;\r\n\r\nexport default BodyWrapper; \r\n\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport HeaderWrapper, {\r\n  Spacer,\r\n  Header,\r\n} from \"../components/common/HeaderWrapper\";\r\nimport Button, { ButtonText } from \"../components/common/Button\";\r\nimport { RiNetflixFill, RiArrowRightSLine } from \"react-icons/ri\";\r\nimport myColor from \"../lib/styles/myColor\";\r\nimport styled from \"styled-components\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { changeInput } from \"../modules/auth\";\r\nimport BodyWrapper from \"../components/common/BodyWrapper\";\r\n\r\nconst FirstText = styled.p`\r\n  text-align: center;\r\n  font-weight: bold;\r\n  margin: 0;\r\n  font-size: 3rem;\r\n\r\n  @media (max-width: 600px) {\r\n    font-size: 2.4rem;\r\n  }\r\n`;\r\n\r\nconst SecondText = styled.p`\r\n  text-align: center;\r\n  font-size: 1.6rem;\r\n  max-width: 625px;\r\n  margin: 1rem auto 0.7rem;\r\n\r\n  @media (max-width: 600px) {\r\n    font-size: 1.3rem;\r\n  }\r\n`;\r\n\r\nconst ThirdText = styled.p`\r\n  text-align: center;\r\n  font-size: 1.2rem;\r\n  margin-top: 2rem;\r\n\r\n  @media (max-width: 600px) {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\nconst StyledBox = styled.div`\r\n  width: 100%;\r\n  min-height: 8rem;\r\n`;\r\n\r\nconst FormWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n\r\n  @media (max-width: 480px) {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  font-size: 20px;\r\n  padding: 10px;\r\n  border: none;\r\n  line-height: 30px;\r\n  width: 100%;\r\n  color: ${myColor.mainGray[8]};\r\n  \r\n  &:focus {\r\n    outline: none;\r\n  }\r\n  \r\n  @media (min-width: 481px) and (max-width: 700px) {\r\n    width: 55vw;\r\n  }\r\n\r\n  @media (min-width: 701px) {\r\n    width: 25rem;\r\n  }\r\n`;\r\n  \r\nconst ErrorMessage = styled.div`\r\n  color: orange;\r\n  font-size: 0.725rem;\r\n  margin-top: 0.5rem;\r\n\r\n  @media (max-width: 480px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst InputButton = styled(Button)`\r\n  border-radius: 0 !important;\r\n\r\n  @media (max-width: 480px) {\r\n    width: 96%;\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-top: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst InputWrapper = styled.div`\r\n  @media (max-width: 480px) {\r\n    width: 96%;\r\n  }\r\n`;\r\n\r\n/*\r\n * 기본 Home 페이지 - login 이전, logout 이후\r\n */\r\n\r\nconst HomePage = ({ history }) => {\r\n  const [userEmail, setUserEmail] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n\r\n  const dispatch = useDispatch();\r\n  const inputEl = useRef();\r\n\r\n  //이메일 검증 정규식\r\n  const emailRegExp =\r\n    /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\r\n\r\n  const onhandleClick = () => {\r\n    if (userEmail.length == 0) {\r\n      setError(\"빈칸을 채워주세요.\");\r\n      setUserEmail(\"\");\r\n      inputEl.current.focus();\r\n    } else if (userEmail.match(emailRegExp) == null) {\r\n      setError(\"올바른 이메일을 입력하세요.\");\r\n      setUserEmail(\"\");\r\n      inputEl.current.focus();\r\n    } else {\r\n      dispatch(\r\n        changeInput({\r\n          form: \"register\",\r\n          key: \"username\",\r\n          value: userEmail,\r\n        })\r\n      );\r\n      history.push(\"/register\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <HeaderWrapper>\r\n        <Header>\r\n          <RiNetflixFill color={myColor.mainRed[0]} size={40} />\r\n          <Link to=\"/login\">\r\n            <Button size={1}>로그인</Button>\r\n          </Link>\r\n        </Header>\r\n      </HeaderWrapper>\r\n      <Spacer />\r\n\r\n      <BodyWrapper>\r\n        <FirstText>실시간 평점순 영화를 확인하세요.</FirstText>\r\n        <SecondText>\r\n          다양한 디바이스에서 사용하세요. 아래 시작하기 버튼을 누르면 이동합니다.\r\n        </SecondText>\r\n        \r\n        <StyledBox>\r\n          <ThirdText>\r\n            시작할 준비가 되셨나요? 멤버십을 등록하려면 이메일 주소를\r\n            입력하세요.\r\n          </ThirdText>\r\n          <FormWrapper>\r\n            <InputWrapper>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"username\"\r\n                autoComplete=\"username\"\r\n                placeholder=\"이메일 주소\"\r\n                ref={inputEl}\r\n                value={userEmail}\r\n                onChange={(e) => {\r\n                  setUserEmail(e.target.value);\r\n                  setError(null);\r\n                }}\r\n              />\r\n              {error && <ErrorMessage>{error}</ErrorMessage>}\r\n            </InputWrapper>\r\n            <InputButton\r\n              size={1.6}\r\n              onClick={() => {\r\n                onhandleClick();\r\n              }}\r\n            >\r\n              <ButtonText>\r\n                시작하기 <RiArrowRightSLine />\r\n              </ButtonText>\r\n            </InputButton>\r\n          </FormWrapper>\r\n        </StyledBox>\r\n      </BodyWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(HomePage);\r\n","import styled from \"styled-components\";\r\nimport HeaderWrapper, { Spacer } from \"../common/HeaderWrapper\";\r\nimport { RiNetflixFill } from \"react-icons/ri\";\r\nimport myColor from \"../../lib/styles/myColor\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n/*\r\n * 회원가입/로그인 페이지 레이아웃 컴포넌트\r\n */\r\n\r\nconst Template = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: black;\r\n  color: ${myColor.mainWhite};\r\n\r\n  @media only screen and (min-width: 540px) {\r\n    min-width: 430px;\r\n    height: 100vh;\r\n  }\r\n`;\r\n\r\nconst TemplateWrapper = styled.div`\r\n  margin-top: 5rem;\r\n\r\n  @media only screen and (min-width: 540px) {\r\n    max-width: 500px;\r\n    min-height: 100vh;\r\n    margin: 0 auto;\r\n    padding: 0 35px;\r\n  }\r\n`;\r\n\r\nconst AuthTemplate = ({ children }) => {\r\n  return (\r\n    <>\r\n      <HeaderWrapper>\r\n        <Link to=\"/\">\r\n          <RiNetflixFill color={myColor.mainRed[0]} size={55} />\r\n        </Link>\r\n      </HeaderWrapper>\r\n\r\n      <div>\r\n        <TemplateWrapper>\r\n          <Spacer />\r\n          <Template>{children}</Template>\r\n        </TemplateWrapper>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthTemplate;\r\n","import { Link } from \"react-router-dom\";\r\nimport Button from \"../common/Button\";\r\nimport styled, { css } from \"styled-components\";\r\nimport myColor from \"../../lib/styles/myColor\";\r\n\r\nconst AuthFormContainer = styled.div`\r\n  width: 90%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  \r\n  @media only screen and (min-width: 540px) {\r\n    width: 70%;\r\n  }\r\n`;\r\n\r\nconst StyledForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 1.5rem 0;\r\n`;\r\n\r\nconst Footer = styled.div`\r\n  margin-top: 0.8rem;\r\n  padding: 0 auto;\r\n`;\r\n\r\nconst ErrorMessage = styled.div`\r\n  color: orange;\r\n  text-align: center;\r\n  font-size: 0.725rem;\r\n  margin-top: 0.8rem;\r\n`;\r\n\r\nconst TextBox = styled.p`\r\n  text-align: center;\r\n\r\n  ${(props) =>\r\n    props.size &&\r\n    css`\r\n      font-size: ${props.size}px;\r\n    `}\r\n`;\r\n\r\nconst BoldTextBox = styled(TextBox)`\r\n  font-weight: bold;\r\n`;\r\n\r\nconst AuthFormInput = styled.input`\r\n  font-size: 15px;\r\n  padding: 0.5rem;\r\n  border: none;\r\n  border-radius: 4px;\r\n  background-color: ${myColor.mainGray[8]};\r\n  color: ${myColor.mainWhite};\r\n  size: 40;\r\n  height: 55px;\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  & + & {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\nconst AuthFormButton = styled(Button)`\r\n  width: 100%;\r\n  padding: 1rem 0;\r\n  margin-top: 1rem;\r\n`;\r\n\r\n/*\r\n * 회원가입/로그인 폼 컴포넌트\r\n * type을 props로 받아 회원가입/로그인 폼을 렌더링\r\n */\r\n\r\nconst typeMap = {\r\n  login: \"로그인\",\r\n  register: \"회원가입\",\r\n};\r\n\r\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\r\n  const text = typeMap[type];\r\n\r\n  return (\r\n    <AuthFormContainer>\r\n      <div>\r\n        <BoldTextBox size={30}>{text}</BoldTextBox>\r\n        <StyledForm onSubmit={onSubmit}>\r\n          <AuthFormInput\r\n            name=\"username\"\r\n            autoComplete=\"username\"\r\n            placeholder=\"이메일 주소\"\r\n            onChange={onChange}\r\n            value={form.username}\r\n          />\r\n          <AuthFormInput\r\n            name=\"password\"\r\n            autoComplete=\"password\"\r\n            type=\"password\"\r\n            placeholder=\"비밀번호\"\r\n            onChange={onChange}\r\n            value={form.password}\r\n          />\r\n          {type === \"register\" && (\r\n            <AuthFormInput\r\n              name=\"passwordConfirm\"\r\n              autoComplete=\"passwordConfirm\"\r\n              type=\"password\"\r\n              placeholder=\"비밀번호 확인\"\r\n              onChange={onChange}\r\n              value={form.passwordConfirm}\r\n            />\r\n          )}\r\n          <AuthFormButton size={1}>{text}</AuthFormButton>\r\n        </StyledForm>\r\n        {error && <ErrorMessage>{error}</ErrorMessage>}\r\n      </div>\r\n      <Footer>\r\n        {type === \"login\" ? (\r\n          <>\r\n            <TextBox>아직 회원이 아니신가요?</TextBox>\r\n            <BoldTextBox>\r\n              <Link to=\"/register\">지금 가입하세요</Link>\r\n            </BoldTextBox>\r\n          </>\r\n        ) : (\r\n          <BoldTextBox>\r\n            <Link to=\"/login\">로그인하러 가기</Link>\r\n          </BoldTextBox>\r\n        )}\r\n      </Footer>\r\n    </AuthFormContainer>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest, call } from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\nimport createSaga, { createRequestActionType } from '../lib/createSaga';\r\n\r\nconst TEMP_LOGGEDIN = 'user/TEMP_LOGGEDIN';\r\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionType(\r\n    'user/CHECK',\r\n);\r\nconst LOGOUT = 'user/LOGOUT';\r\n\r\nexport const tempLoggedIn = createAction(TEMP_LOGGEDIN, user=>user);\r\nexport const check = createAction(CHECK);\r\nexport const logout = createAction(LOGOUT);\r\n\r\nconst checkSaga = createSaga(CHECK, authAPI.check);\r\n\r\nfunction checkFailureSaga() {\r\n    try {\r\n        localStorage.removeItem('user');\r\n    } catch(e) {\r\n        console.log('localStorage 오류');\r\n    }\r\n}\r\n\r\nfunction* logoutSaga() {\r\n    try{\r\n        yield call(authAPI.logout);\r\n        localStorage.removeItem('user');\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nexport function* userSaga() {\r\n    yield takeLatest(CHECK, checkSaga);\r\n    yield takeLatest(CHECK_FAILURE, checkFailureSaga);\r\n    yield takeLatest(LOGOUT, logoutSaga);\r\n}\r\n\r\n\r\nconst initialState = {\r\n    user:null,\r\n    checkError:null,\r\n};\r\n\r\nexport default handleActions(\r\n    {\r\n        [TEMP_LOGGEDIN]: (state, { payload: user }) => ({\r\n            ...state,\r\n            user,\r\n        }),\r\n        [CHECK_SUCCESS]: (state, { payload: user }) => ({\r\n            ...state,\r\n            user,\r\n            checkError:null,\r\n        }),\r\n        [CHECK_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            user:null,\r\n            checkError:error,\r\n        }),\r\n        [LOGOUT] : state => ({\r\n            ...state,\r\n            user:null,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n","import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"../../node_modules/react-router-dom/index\";\r\nimport { changeInput, initializeForm, login } from \"../modules/auth\";\r\nimport AuthForm from \"../components/auth/AuthForm\";\r\nimport { check } from '../modules/user';\r\n\r\nconst LoginForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.login,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    user: user.user\r\n  }));\r\n\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeInput({\r\n        form: \"login\",\r\n        key: name,\r\n        value: value,\r\n      })\r\n    );\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, password } = form;\r\n    dispatch(login({ username, password }));\r\n  };\r\n\r\n  //컴포넌트 렌더링시 form 초기화\r\n  useEffect(() => {\r\n    dispatch(initializeForm(\"login\"));\r\n  }, [dispatch]);\r\n\r\n  useEffect(()=>{\r\n    if(authError) {\r\n      console.log('오류 발생', authError);\r\n      setError('로그인 실패 다시 시도하세요.');\r\n      return;\r\n    }\r\n    if(auth) {\r\n      console.log('로그인 성공');\r\n      dispatch(check());\r\n    }\r\n  }, [auth, authError, dispatch]);\r\n\r\n  useEffect(()=>{\r\n    if(user) {\r\n      history.push('/mypage');\r\n      try{\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n      } catch(e) {\r\n        console.log('localStorage 오류');\r\n      }\r\n    }\r\n  },[history, user]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"login\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(LoginForm);\r\n","import AuthTemplate from \"../components/auth/AuthTemplate\";\r\nimport LoginForm from \"../containers/LoginForm\";\r\n\r\n/* 로그인 페이지 */\r\n\r\nconst LoginPage = () => {\r\n  return (\r\n    <AuthTemplate>\r\n      <LoginForm />\r\n    </AuthTemplate>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { changeInput, initializeForm, register } from \"../modules/auth\";\r\nimport AuthForm from \"../components/auth/AuthForm\";\r\nimport { withRouter } from \"../../node_modules/react-router-dom/index\";\r\n\r\nconst RegisterForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.register,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    user: user.user,\r\n  }));\r\n\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeInput({\r\n        form: \"register\",\r\n        key: name,\r\n        value: value,\r\n      })\r\n    );\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, password, passwordConfirm } = form;\r\n    //오류 처리 1. 인풋창 중 한군데라도 비었을때\r\n    if([username, password, passwordConfirm].includes('')) {\r\n      setError('빈 칸을 모두 입력하세요.');\r\n      return;\r\n    }\r\n    //오류 처리 2. 비밀번호 불일치시 \r\n    if(password !== passwordConfirm) {\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      dispatch(changeInput({ form: 'register', key: 'password', value: '' }));\r\n      dispatch(changeInput({ form: 'register', key: 'passwordConfirm', value: '' }));\r\n      return;\r\n    }\r\n    dispatch(register({ username, password }));\r\n  };\r\n\r\n  //컴포넌트 렌더링시 form 초기화(form.username 값이 있으면 초기화 하지 않음)\r\n  useEffect(() => {\r\n    if(!form.username) {\r\n      dispatch(initializeForm(\"register\"));\r\n    }\r\n  }, [dispatch, form.username]);\r\n\r\n  useEffect(()=>{\r\n    if(authError) {\r\n      //오류 처리 3. 계정이 이미 존재할 때\r\n      if(authError.response.status === 409) {\r\n        setError('이미 존재하는 계정입니다.');\r\n        return;\r\n      }\r\n      //기타 오류 처리\r\n      setError('회원가입 실패');\r\n      return;\r\n    }\r\n    if(auth){\r\n      console.log('회원가입 성공');\r\n      history.push('/login');\r\n    }\r\n  }, [auth, authError, history]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"register\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(RegisterForm);\r\n","import AuthTemplate from \"../components/auth/AuthTemplate\";\r\nimport RegisterForm from \"../containers/RegisterForm\";\r\n\r\n/* 회원가입 페이지 */\r\n\r\nconst RegisterPage = () => {\r\n  return (\r\n    <AuthTemplate>\r\n      <RegisterForm />\r\n    </AuthTemplate>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;\r\n","import styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Moviemain.css\";\r\nimport { useState } from \"react\";\r\n\r\nconst MovieContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n`;\r\n\r\nconst StyledImg = styled.img`\r\n  width: 100%;\r\n  height: auto;\r\n`;\r\n\r\nconst StyledList = styled.ul`\r\n  list-style: none;\r\n  padding: 0;\r\n  @media (min-width: 768px) {\r\n    font-size: 1.5rem;\r\n  }\r\n`;\r\n\r\nconst StyledBox = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  @media (min-width: 768px) {\r\n    width: 300px;\r\n    height: 433px;\r\n  }\r\n`;\r\n\r\nconst Moviemain = ({ title, year, summary, poster, genres }) => {\r\n  const [card, setCard] = useState(true);\r\n\r\n  const onhandleClick = () => {\r\n    setCard(!card);\r\n  };\r\n\r\n  return (\r\n    <MovieContainer className=\"container\">\r\n      {card ? (\r\n        <>\r\n          <StyledBox className=\"item front-face\">\r\n            <StyledImg src={poster} alt={title} title={title} />\r\n          </StyledBox>\r\n          <StyledBox className=\"item back-face\" onClick={onhandleClick}>\r\n            <StyledList>\r\n              <li>Title: {title}</li>\r\n              <li>Year: {year}</li>\r\n              <li>Genres: </li>\r\n              <ul>\r\n                {genres.map((el) => {\r\n                  return <li key={el}>{el}</li>;\r\n                })}\r\n              </ul>\r\n            </StyledList>\r\n          </StyledBox>\r\n        </>\r\n      ) : (\r\n        <StyledBox className=\"summary\" onClick={onhandleClick}>\r\n          {summary ? summary : \"No summary\"}\r\n        </StyledBox>\r\n      )}\r\n    </MovieContainer>\r\n  );\r\n};\r\n\r\nMoviemain.propTypes = {\r\n  year: PropTypes.number,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string,\r\n  poster: PropTypes.string,\r\n  genres: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n\r\nexport default Moviemain;\r\n","import { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport \"swiper/swiper.min.css\";\r\nimport \"swiper/components/navigation/navigation.min.css\";\r\nimport SwiperCore, { Navigation } from \"swiper\";\r\nimport styled from \"styled-components\";\r\nimport Moviemain from \"./Moviemain\";\r\nimport myColor from \"../../lib/styles/myColor\";\r\n\r\n/* 스와이퍼 컨테이너 */\r\nconst StyledSwiper = styled(Swiper)`\r\n  width: 100%;\r\n  height: 66vh;\r\n  margin-top: 5rem;\r\n  color: ${myColor.mainWhite};\r\n`;\r\n\r\nconst StyledBox = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Arrowswiper = ({ isLoading, movies }) => {\r\n  SwiperCore.use([Navigation]);\r\n\r\n  return (\r\n    <>\r\n      <StyledSwiper\r\n        navigation\r\n        slidesPerView={2}\r\n        spaceBetween={100}\r\n        centeredSlides\r\n        pagination={{\r\n          clickable: true,\r\n        }}\r\n        scrollbar={{ draggable: true, dragSize: 24 }}\r\n        onSlideChange={() => console.log(\"slide change\")}\r\n      >\r\n        {isLoading ? (\r\n          <SwiperSlide>\r\n            <StyledBox>\r\n              <span>loading...</span>\r\n            </StyledBox>\r\n          </SwiperSlide>\r\n        ) : (\r\n          <>\r\n            {movies.map((movie) => (\r\n              <SwiperSlide key={movie.id}>\r\n                <Moviemain\r\n                  year={movie.year}\r\n                  title={movie.title}\r\n                  summary={movie.summary}\r\n                  poster={movie.image}\r\n                  genres={movie.genres}\r\n                />\r\n              </SwiperSlide>\r\n            ))}\r\n          </>\r\n        )}\r\n      </StyledSwiper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Arrowswiper;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Arrowswiper from \"../components/movie/Arrowswiper\";\r\nimport axios from \"axios\";\r\nimport { startLoading, finishLoading } from \"../modules/loading\";\r\n\r\nconst MovieForm = () => {\r\n  const dispatch = useDispatch();\r\n  const { isLoading } = useSelector(({ loading }) => ({\r\n    isLoading: loading[\"isLoading\"],\r\n  }));\r\n\r\n  /* 외부 API로 영화 데이터 가져오기 */\r\n  const [movies, setMovies] = useState([]);\r\n  const getMovies = async () => {\r\n    dispatch(startLoading(\"isLoading\"));\r\n    try {\r\n      const {\r\n        data: {\r\n          data: { movies },\r\n        },\r\n      } = await axios.get(\r\n        \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\r\n      );\r\n\r\n      const sortedMovies = [];\r\n      for (let x of movies) {\r\n        const movie = new Object({\r\n          id: x.id,\r\n          title: x.title,\r\n          year: x.year,\r\n          summary: x.summary,\r\n          image: x.medium_cover_image,\r\n          genres: x.genres,\r\n        });\r\n        sortedMovies.push(movie);\r\n      }\r\n      setMovies(sortedMovies);\r\n      dispatch(finishLoading(\"isLoading\"));\r\n    } catch (e) {\r\n      console.log(e);\r\n      dispatch(startLoading(\"isLoading\"));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMovies();\r\n  }, []);\r\n\r\n  return <Arrowswiper movies={movies} isLoading={isLoading} />;\r\n};\r\n\r\nexport default MovieForm;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\nimport { logout } from \"../modules/user\";\r\nimport HeaderWrapper, {\r\n  Spacer,\r\n  Header,\r\n} from \"../components/common/HeaderWrapper\";\r\nimport Button from \"../components/common/Button\";\r\nimport myColor from \"../lib/styles/myColor\";\r\nimport { RiNetflixFill } from \"react-icons/ri\";\r\nimport styled from \"styled-components\";\r\nimport MovieForm from \"../containers/MovieForm\";\r\nimport UserForm from \"../containers/UserForm\";\r\nimport BodyWrapper from \"../components/common/BodyWrapper\";\r\n\r\nconst StyledBox = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst UserInfo = styled.div`\r\n  cursor: pointer;\r\n  font-weight: 600;\r\n  margin-right: 0.4rem;\r\n\r\n  @media (min-width: 480px) {\r\n    margin-right: 1rem;\r\n  }\r\n`;\r\n\r\nconst MyPage = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n  const { user } = useSelector(({ user }) => ({\r\n    user: user.user,\r\n  }));\r\n  const [mypage, setMypage] = useState(false);\r\n\r\n  /* 새로고침하면 로그인 정보 날아가는것 수정하기 \r\n-> 새로고침하면 localStorage와 cookie 살아있는데 modules/user의 user가 날아감 \r\n-> HomePage에서 user 정보 저장해줘야 안 날아감.\r\n*/\r\n  useEffect(() => {\r\n    try {\r\n      const storageUser = localStorage.getItem(\"user\");\r\n      if (!user || !storageUser) {\r\n        console.log(\"로그인 중 아님\");\r\n        return;\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, []);\r\n\r\n  const onLogout = () => {\r\n    dispatch(logout());\r\n    history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <HeaderWrapper>\r\n        <Header>\r\n          <RiNetflixFill color={myColor.mainRed[0]} size={40} />\r\n          {!user ? (\r\n            <StyledBox>\r\n              <Link to=\"/login\">\r\n                <Button size={1}>로그인</Button>\r\n              </Link>\r\n            </StyledBox>\r\n          ) : (\r\n            <StyledBox>\r\n              <UserInfo\r\n                onClick={() => {\r\n                  setMypage(!mypage);\r\n                }}\r\n              >\r\n                {user.username}\r\n              </UserInfo>\r\n              <Button size={1} onClick={onLogout}>\r\n                로그아웃\r\n              </Button>\r\n            </StyledBox>\r\n          )}\r\n        </Header>\r\n      </HeaderWrapper>\r\n      <Spacer />\r\n\r\n      {!user && (\r\n        <BodyWrapper>\r\n          <span>로그인 후에 이용하실 수 있습니다.</span>\r\n        </BodyWrapper>\r\n      )}\r\n      {user && (mypage ? <BodyWrapper><span>구현 전</span></BodyWrapper> : <MovieForm />)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(MyPage);\r\n","import React from \"react\";\r\nimport { Route } from 'react-router-dom'\r\nimport HomePage from \"./pages/HomePage\";\r\nimport LoginPage from \"./pages/LoginPage\";\r\nimport RegisterPage from \"./pages/RegisterPage\";\r\nimport MyPage from \"./pages/MyPage\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"routeHome\">\r\n      <Route component={HomePage} path=\"/\" exact />\r\n      <Route component={LoginPage} path=\"/login\" />\r\n      <Route component={RegisterPage} path=\"/register\" />\r\n      <Route component={MyPage} path=\"/mypage\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport auth, { authSaga } from \"./auth\";\r\nimport loading from \"./loading\";\r\nimport { all } from 'redux-saga/effects';\r\nimport user, { userSaga } from './user';\r\n\r\n\r\n/* 루트 리듀서 */\r\nconst rootReducer = combineReducers({\r\n    auth,\r\n    loading,\r\n    user,\r\n});\r\n\r\nexport function* rootSaga(){\r\n    yield all([authSaga(), userSaga()]);\r\n}\r\n\r\nexport default rootReducer;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer, {rootSaga} from \"./modules/index\";\nimport { tempLoggedIn, check } from \"./modules/user\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\n\nfunction checkUser() {\n  try{\n    const user = localStorage.getItem('user');\n    if(!user) return;  //로그인 안하면 암것도 안함\n    store.dispatch(tempLoggedIn(JSON.parse(user))); \n    store.dispatch(check()); //로그인 되어있으면 user 저장\n  } catch(e) {\n    console.log(\"localStorage 오류\");\n  } \n}\n\nsagaMiddleware.run(rootSaga);\ncheckUser();\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}